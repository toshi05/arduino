
}


}
}


}


}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

}
}
}
}
}
}
}
}
}
}
}
}
}

}
}
}
}
}
}
}
}
}
}
}
}

}
}
}
}
}
}
}
}
}
}
}
}

}
}
}
}
}
}
}
}
}
}
}
}
}
}
}

}
}
}
}
}
}
}
}
}
}
}
}
}
}
}
}


}
}

int BPM_count = 0;
int BPM_NUM = 0;
int pulsePin = 2;                 // Pulse Sensor purple wire connected to analog pin 0
int blinkPin = 13;                // pin to blink led at each beat
int fadePin = 5;                  // pin to do fancy classy fading blink at each beat
int fadeRate = 0;                 // used to fade LED on with PWM on fadePin
int heart_rates[60];

int syokiti = 0;
int syoki = 0;
int miyashita_heart = 0;
int st =1;
// Volatile Variables, used in the interrupt service routine!
volatile int BPM;                   // int that holds raw Analog in 0. updated every 2mS
volatile int Signal;                // holds the incoming raw data
volatile int IBI = 600;             // int that holds the time interval between beats! Must be seeded! 
volatile boolean Pulse = false;     // "True" when User's live heartbeat is detected. "False" when not a "live beat". 
volatile boolean QS = false;        // becomes true when Arduoino finds a beat.


int x_size;
int y_size;
int sinpakuvalue;
int item;
int x_plus; // ボールのx座標を増減
int y_plus; // ボールのy座標を増減
int x_play; // プレイヤーのx座標を増減
int y_play; // プレイヤーのy座標を増減
int player_x; // バーのx座標
int player_y; // バーのy座標

int middle_hi;
int middle_lo;

int x_pos = 0;
int y_pos = 2;
int count = 0;
int time = 0;

int magic = 0;

int x_teki;
int y_teki;
int tetsu;
int karasawa;
int tosi;
int randm;
int count_teki;
int flag;

void setup(){
  pinMode(joyvcc, OUTPUT);
  pinMode(joygnd, OUTPUT); 
  pinMode(blinkPin,OUTPUT);         // pin that will blink to your heartbeat!
  pinMode(fadePin,OUTPUT);          // pin that will fade to your heartbeat!
  
  Serial.begin(9600);   
  
  interruptSetup();    
  PIXEL.init() ;
  PIXEL.backLight(1) ;
  PIXEL.clear(255, 255, 255);
  PIXEL.createSprite(12,10,10);//白塗りつぶし
  PIXEL.fillSprite(12,white);//
  PIXEL.createSprite(3,10,10);//黒四角
  PIXEL.fillSprite(3,black);//黒四角
  PIXEL.createSprite(11,15,13);//黒四角
  PIXEL.fillSprite(11,player1);//黒四角
  PIXEL.createSprite(0, 10,10);//ボール
  PIXEL.fillSprite(0, ball);
  PIXEL.createSprite(1, 14, 14) ;
  PIXEL.fillSprite(1, sprite) ;

  // 初期値

  sinpakuvalue = 0;
  item = 0;
  x_size = 20;
  y_size = 20;
  x_plus = y_plus = 1;
  x_play = y_play = 0;
  player_x = 50;
  player_y = 100;

  x_teki = 63;
  y_teki = 10 ;
  tetsu=1;
  karasawa =1;
  tosi =1;
  randm = 0;
  count_teki =0;

  // 誤差20%の中央範囲
  middle_hi = (int)((1024.0 / 2.0) + (512.0 * 0.20));
  middle_lo = (int)((1024.0 / 2.0) - (512.0 * 0.20));
}

void loop(){
  digitalWrite(joyvcc, HIGH);
  digitalWrite(joygnd, LOW);
  magic = shinpaku();

  
  //Serial.print("shinpaku\n");
  //Serial.print(shinpaku());
  teki_random();
  PIXEL.drawSprite(11, player_x, player_y);
  joycon(0, 0, 15, 13);

  if(time % 100 == 0){
    bullet[count].flag = 1;
    e_bullet[count].flag = 1;
    //Serial.print(count);
    //Serial.print('\n');
    //Serial.print(bullet[count].flag);
    //Serial.print('\n');
    count++;
  }
  if(count == 5) count = 0;
  for(int i = 0;i < 5; i++){
    if(bullet[i].flag && bullet[i].y < 2) bullet[i].flag = 0;
    if(bullet[i].flag == 1){
      flag = PlayerHit(x_teki,y_teki,14,14,bullet[i].x,bullet[i].y,10,10,bullet[i].flag);
      bullet[i].flag = flag;
      //Serial.print(i);
      DrawImage(3,bullet[i].x,bullet[i].y,bullet[i].flag);
      //Serial.print(bullet[i].flag);
      delay(1);
      bullet[i].y -= y_pos;
    }
    else{      
      DrawImage(12,bullet[i].x,bullet[i].y,bullet[i].flag);
      bullet[i].y = player_y; 
      bullet[i].x = player_x;  
      PIXEL.drawSprite(11, player_x, player_y);
    }
    time++;
  }
}

void DrawImage(int id,int x,int y,int flag){
  if(flag == 0) PIXEL.drawSprite(12,x,y);
  else PIXEL.drawSprite(id,x,y);
}


void joycon(int sinpakuvalue, int item, int x_size, int y_size){
  int joyx = analogRead(A0);
  int joyy = analogRead(A1);

  player_x += x_play;  // x方向にボールを移動
  player_y += y_play;  // y方向にボールを移動
  if (joyy <= middle_lo) {
    if (player_x >= (1 + sinpakuvalue + item)) {
      x_play = -(1 + sinpakuvalue + item);  // バーを左に移動
    }
    else if (player_x < (1 + sinpakuvalue + item)){
      player_x = 1;
    }
  }  
  else if(joyy >= middle_hi) {
    if (player_x <= MAX_DISP_X - x_size - (1+sinpakuvalue+item)) {
      x_play = +1+sinpakuvalue+item;  // バーを右に移動
    }
    else if (player_x > MAX_DISP_X - x_size - (1+sinpakuvalue+item)) {
      player_x = MAX_DISP_X - x_size -1;
    }
  }
  else if ((joyy > middle_lo) && (joyy < middle_hi)) {
    x_play = 0;
  }

  // バーyの描画
  if (joyx >= middle_hi) {
    if (player_y >= (1 + sinpakuvalue + item)) {
      y_play = -(1 + sinpakuvalue + item);  // バーを上に移動
    }
    else if (player_y < (1 + sinpakuvalue + item)){
      player_y = 1;
    }
  }   
  else if(joyx <= middle_lo) {
    if (player_y <= MAX_DISP_Y - y_size - (1+sinpakuvalue+item)) {
      y_play = +1+sinpakuvalue+item;  // バーを下に移動
    }
    else if (player_y > MAX_DISP_Y - y_size - (1+sinpakuvalue+item)){
      player_y = MAX_DISP_Y - y_size -1;
    }
  }  
  else if ((joyy > middle_lo) && (joyy < middle_hi)){
    y_play = 0;
  }
}


void teki_random(){
  tetsu += rand()%2;
  if(count_teki==70){
    randm =rand()%2;
    if(randm==1)karasawa =-1;
    else karasawa =1;
  }
  if (x_teki > (127  - 13)){
    karasawa = -1 ;
  }

  if (x_teki < (0)){
    karasawa = 1;
  }

  if(count_teki==70){
    randm =rand()%2;
    if(randm==1)tosi =-1;
    else tosi =1;
    count_teki=0;
  }

  if (y_teki > (63  - 13)){
    tosi = -1 ;
  }

  if (y_teki < (0)){
    tosi = 1;
  }

  x_teki+=tetsu*karasawa;
  tetsu =0;
  tetsu += rand()%2;
  y_teki+=tetsu*tosi;

  PIXEL.drawSprite(1, x_teki, y_teki) ;
  delay(30);
  tetsu =0;
  count_teki++;
  for(int i = 0;i < 5; i++){
    //Serial.print("flag\n");
    //Serial.print(e_bullet[i].flag);
    if(e_bullet[i].flag && e_bullet[i].y > 120) e_bullet[i].flag = 0;
    if(e_bullet[i].flag == 1){
      flag = PlayerHit(player_x,player_y,14,14,e_bullet[i].x,e_bullet[i].y,10,10,e_bullet[i].flag);
      e_bullet[i].flag = flag;
      //Serial.print(player_x);
      DrawImage(0,e_bullet[i].x,e_bullet[i].y,e_bullet[i].flag);
       //Serial.print("y\n");
     // Serial.print(e_bullet[i].y);
      delay(1);
      e_bullet[i].y += y_pos;
      //Serial.print("y\n");
     // Serial.print(e_bullet[i].y);
    }
    else{      
      DrawImage(12,e_bullet[i].x,e_bullet[i].y,e_bullet[i].flag);
      e_bullet[i].y = y_teki; 
      e_bullet[i].x = x_teki;  
      PIXEL.drawSprite(11, player_x, player_y);
    }
  }


}

int PlayerHit(int x_p,int y_p,int x_size_p,int y_size_p,int x_b,int y_b,int x_size_b,int y_size_b,int f){
  if ((y_b <= (y_p + y_size_p)) && ((y_b + y_size_b) >= y_p)) {  // キャラに当たったとき
    if (((x_b + x_size_b) > x_p) && (x_b < (x_p + x_size_p))){
      f = 0;
    }
  }
  return(f);
}

int WallHit(int x_w,int y_w,int x_size_w,int y_size_w,int x_b,int y_b,int x_size_b,int y_size_b,int f){
  if ((y_b <= (y_w + y_size_w)) && ((y_b + y_size_b) >= y_w)) {  // 壁に当たったとき
    if (((x_b + x_size_b) > x_w) && (x_b < (x_w + x_size_w))){
      f = 0;
    }
  }
  return(f);
}  


int PixelHit(int x_b,int y_b,int x_size_b,int y_size_b,int f){
  if (x_b == 0) {  // キャラに当たったとき
    f = 0;
  }
  if (x_b == MAX_DISP_X - x_size_b) {  // キャラに当たったとき
    f = 0;
  }
  if (y_b == 0) {  // キャラに当たったとき
    f = 0;
  }
  if (y_b == MAX_DISP_Y - y_size_b) {  // キャラに当たったとき
    f = 0;
  }  
  return(f);
}  
int shinpaku(){
  //Serial.print("start");
  //sendDataToSerial('S', Signal);     // goes to sendDataToSerial function
  if (QS == true){     // A Heartbeat Was Found
                       // BPM and IBI have been Determined
                       // Quantified Self "QS" true when arduino finds a heartbeat
        int fadeRate = 255;         // Makes the LED Fade Effect Happen
                                // Set 'fadeRate' Variable to 255 to fade LED with pulse
                                                                                          
        sendDataToSerial('B',BPM);   // send heart rate with a 'B' prefix
          heart_rates[BPM_NUM] = BPM;
          BPM_NUM++;
                  Serial.print(BPM_NUM);
        if(BPM_NUM == 10){
          BPM_NUM = 0;
          for(int j = 0;j < 10;j++){
            BPM_count += heart_rates[j];
          }
          if(syokiti == 0) syoki = BPM_count;
          syokiti++;
        Serial.print(BPM_NUM);
        miyashita_heart = (BPM_count/10) - (syoki/10);
        Serial.print('a');
        Serial.print(miyashita_heart);
        BPM_count = 0;
        }
        if(30<=miyashita_heart)st=3;//息が上がる
        else if(20<=miyashita_heart<30)st=2;
        else if(0<=miyashita_heart<20)st=1;
        else if(0>miyashita_heart)st = 0;
        miyashita_heart = 0;
        //sendDataToSerial('Q',IBI);   // send time between beats with a 'Q' prefix
        QS = false;                      // reset the Quantified Self flag for next time    
  }
  return(st);
}
//  Sends Data to Pulse Sensor Processing App, Native Mac App, or Third-party Serial Readers. 
void sendDataToSerial(char symbol, int data ){
    Serial.print(symbol);
    Serial.println(data);                
  }
void Calc_shinpaku(int *cl_s){
  Serial.print("*cl_s");
  Serial.print(*cl_s);
  *cl_s -= 1;  
}
